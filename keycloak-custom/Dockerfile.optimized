# Alternative optimized Dockerfile with distroless approach
# ---- stage 1: build the SPI jar
FROM gradle:8.10.2-jdk17 AS builder
WORKDIR /workspace

# Copy gradle files first for better caching
COPY spi/gradle/ /workspace/spi/gradle/
COPY spi/gradlew* /workspace/spi/
COPY spi/settings.gradle.kts /workspace/spi/
COPY spi/gradle.properties /workspace/spi/
COPY spi/build.gradle.kts /workspace/spi/

WORKDIR /workspace/spi

# Download dependencies first (better layer caching)
RUN gradle --no-daemon dependencies

# Copy source code
COPY spi/src/ /workspace/spi/src/

# Build with optimizations
RUN gradle --no-daemon clean build -x test --parallel --build-cache

# ---- stage 2: Create a minimal Keycloak build stage
FROM quay.io/keycloak/keycloak:25.0.6 AS keycloak-builder

USER root

# Copy JARs from builder stage
COPY --from=builder /workspace/spi/build/libs/jars/*.jar /opt/keycloak/providers/
COPY --from=builder /workspace/spi/build/libs/*.jar /opt/keycloak/providers/

# Build the Quarkus image with production optimizations
RUN /opt/keycloak/bin/kc.sh build \
    --health-enabled=true \
    --metrics-enabled=true \
    --db=postgres \
    --features=preview \
    --verbose

# ---- stage 3: Create the runtime image
FROM quay.io/keycloak/keycloak:25.0.6

# Copy the built Keycloak installation from the builder stage
COPY --from=keycloak-builder /opt/keycloak/ /opt/keycloak/

# Use non-root user
USER 1000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=10s --retries=3
CMD curl -f http://localhost:8080/health/ready || exit 1

# Production environment variables
ENV KC_HEALTH_ENABLED=true
ENV KC_METRICS_ENABLED=true
ENV KC_CACHE=ispn
ENV KC_CACHE_STACK=kubernetes

# Set default entrypoint
ENTRYPOINT ["/opt/keycloak/bin/kc.sh"]
CMD ["start", "--optimized"]