# Nginx configuration for testing SSL certificates
server {
    listen 80;
    server_name eservice.localhost localhost;
    
    # Redirect HTTP to HTTPS
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name eservice.localhost localhost;

    # SSL Configuration
    ssl_certificate /etc/nginx/ssl/server.crt;
    ssl_certificate_key /etc/nginx/ssl/server.key;
    
    # SSL Settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!SRP:!CAMELLIA;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Document root
    root /usr/share/nginx/html;
    index index.html;

    # Default location
    location / {
        # Create a simple test page
        return 200 '<!DOCTYPE html>
<html>
<head>
    <title>SSL Certificate Test</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
        .container { background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .success { color: #28a745; }
        .info { color: #007bff; }
        .header { border-bottom: 2px solid #28a745; padding-bottom: 10px; margin-bottom: 20px; }
        .cert-info { background: #f8f9fa; padding: 15px; border-left: 4px solid #28a745; margin: 20px 0; }
        pre { background: #f1f1f1; padding: 10px; border-radius: 4px; overflow-x: auto; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1 class="success">üîê SSL Certificate Test</h1>
        </div>
        
        <div class="cert-info">
            <h3>‚úÖ HTTPS Connection Successful!</h3>
            <p>Your SSL certificate is working correctly.</p>
        </div>
        
        <h3>Connection Details:</h3>
        <ul>
            <li><strong>Server:</strong> $server_name</li>
            <li><strong>Protocol:</strong> $ssl_protocol</li>
            <li><strong>Cipher:</strong> $ssl_cipher</li>
            <li><strong>Request Time:</strong> $time_iso8601</li>
        </ul>
        
        <h3>Test Certificate Information:</h3>
        <pre>Subject: C=SG, ST=Singapore, L=Singapore, O=SSO, OU=IT, CN=eservice.localhost
Alternative Names: eservice.localhost, localhost
Generated by: SSL Certificate Management System</pre>
        
        <div class="cert-info">
            <p class="info"><strong>Note:</strong> This is a self-signed certificate for development purposes only.</p>
        </div>
        
        <h3>Browser Testing:</h3>
        <p>If you see security warnings in your browser:</p>
        <ol>
            <li>Click "Advanced" or "Show Details"</li>
            <li>Click "Proceed to eservice.localhost" or similar</li>
            <li>Or add the certificate to your trusted certificates</li>
        </ol>
    </div>
</body>
</html>';
        add_header Content-Type text/html;
    }

    # Health check endpoint
    location /health {
        return 200 '{"status":"ok","ssl":"enabled","server":"$server_name","time":"$time_iso8601"}';
        add_header Content-Type application/json;
    }

    # Certificate info endpoint
    location /cert-info {
        return 200 '{"ssl_protocol":"$ssl_protocol","ssl_cipher":"$ssl_cipher","server_name":"$server_name","request_time":"$time_iso8601"}';
        add_header Content-Type application/json;
    }

    # Nginx status (optional)
    location /nginx-status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        allow ::1;
        deny all;
    }

    # Error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /50x.html {
        return 500 '<!DOCTYPE html><html><head><title>Server Error</title></head><body><h1>Server Error</h1><p>SSL certificate test server encountered an error.</p></body></html>';
        add_header Content-Type text/html;
    }
}