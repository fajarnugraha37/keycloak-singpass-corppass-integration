#!/usr/bin/env pwsh
<#
.SYNOPSIS
    Download and update CA bundle with latest trusted root certificates

.DESCRIPTION
    This script downloads the latest CA bundle from Mozilla and creates
    a comprehensive ca-bundle.crt file that includes both system CAs
    and your custom CA.

.PARAMETER Source
    Source for CA bundle: mozilla (default), system, or custom

.PARAMETER OutputPath
    Path to save the CA bundle (default: ca/certs/ca-bundle.crt)

.EXAMPLE
    .\update-ca-bundle.ps1
    .\update-ca-bundle.ps1 -Source mozilla -OutputPath ./ca-bundle.crt
#>

param(
    [ValidateSet("mozilla", "system", "custom")]
    [string]$Source = "mozilla",
    [string]$OutputPath = "ca/certs/ca-bundle.crt"
)

# Colors for output
$Green = "`e[32m"
$Yellow = "`e[33m"
$Red = "`e[31m"
$Blue = "`e[34m"
$Reset = "`e[0m"

function Write-ColorOutput {
    param([string]$Message, [string]$Color = $Reset)
    Write-Host "$Color$Message$Reset"
}

Write-ColorOutput "üì¶ CA Bundle Updater" $Blue
Write-ColorOutput "Source: $Source" $Blue
Write-ColorOutput "Output: $OutputPath" $Blue
Write-ColorOutput "===================" $Blue

# Ensure output directory exists
$outputDir = Split-Path $OutputPath -Parent
if ($outputDir -and -not (Test-Path $outputDir)) {
    New-Item -ItemType Directory -Path $outputDir -Force | Out-Null
    Write-ColorOutput "Created directory: $outputDir" $Green
}

switch ($Source) {
    "mozilla" {
        Write-ColorOutput "üì• Downloading Mozilla CA bundle..." $Yellow
        
        # Mozilla's CA bundle URL
        $mozillaUrl = "https://curl.se/ca/cacert.pem"
        $tempPath = [System.IO.Path]::GetTempFileName() + ".pem"
        
        try {
            Invoke-WebRequest -Uri $mozillaUrl -OutFile $tempPath -UseBasicParsing
            Write-ColorOutput "‚úÖ Downloaded Mozilla CA bundle" $Green
            
            # Start fresh CA bundle with Mozilla CAs
            Copy-Item $tempPath $OutputPath
            Remove-Item $tempPath
            
            Write-ColorOutput "‚úÖ Mozilla CA bundle saved to: $OutputPath" $Green
            
        }
        catch {
            Write-ColorOutput "‚ùå Failed to download Mozilla CA bundle: $_" $Red
            return
        }
    }
    
    "system" {
        Write-ColorOutput "üîç Searching for system CA bundle..." $Yellow
        
        # Common system CA bundle locations
        $systemCaBundles = @(
            "C:\Program Files\Git\mingw64\ssl\certs\ca-bundle.crt",  # Git for Windows
            "/etc/ssl/certs/ca-certificates.crt",                     # Linux Ubuntu/Debian
            "/etc/pki/tls/certs/ca-bundle.crt",                       # RHEL/CentOS/Fedora
            "/etc/ssl/ca-bundle.pem",                                  # openSUSE
            "/usr/local/etc/openssl/cert.pem",                        # macOS Homebrew
            "/opt/local/share/curl/curl-ca-bundle.crt",               # macOS MacPorts
            "/usr/share/ssl/certs/ca-bundle.crt"                      # Other Unix
        )
        
        $foundBundle = $false
        foreach ($bundlePath in $systemCaBundles) {
            if (Test-Path $bundlePath) {
                Write-ColorOutput "‚úÖ Found system CA bundle: $bundlePath" $Green
                Copy-Item $bundlePath $OutputPath
                $foundBundle = $true
                break
            }
        }
        
        if (-not $foundBundle) {
            Write-ColorOutput "‚ùå No system CA bundle found in standard locations" $Red
            Write-ColorOutput "Try using -Source mozilla to download from Mozilla" $Yellow
            return
        }
    }
    
    "custom" {
        Write-ColorOutput "üîß Creating custom CA bundle..." $Yellow
        
        # Start with empty file
        "" | Out-File -FilePath $OutputPath -Encoding utf8
        Write-ColorOutput "‚úÖ Initialized empty CA bundle" $Green
    }
}

# Add custom CA if it exists
$customCaPath = "ca/certs/ca.crt"
if (Test-Path $customCaPath) {
    Write-ColorOutput "‚ûï Adding custom CA certificate..." $Yellow
    
    # Add separator comment and custom CA
    @"

# Custom CA Certificate
# Generated by SSL Certificate Management System

"@ | Out-File -FilePath $OutputPath -Append -Encoding utf8
    
    Get-Content $customCaPath | Out-File -FilePath $OutputPath -Append -Encoding utf8
    Write-ColorOutput "‚úÖ Added custom CA to bundle" $Green
}
else {
    Write-ColorOutput "‚ÑπÔ∏è  No custom CA found at $customCaPath" $Yellow
}

# Validate the CA bundle
Write-ColorOutput "üîç Validating CA bundle..." $Yellow

try {
    $bundleContent = Get-Content $OutputPath -Raw
    $certCount = ($bundleContent -split "-----BEGIN CERTIFICATE-----").Count - 1
    
    if ($certCount -gt 0) {
        Write-ColorOutput "‚úÖ CA bundle contains $certCount certificates" $Green
        
        # Show first few certificate subjects for verification
        $tempCertPath = [System.IO.Path]::GetTempFileName()
        $certs = $bundleContent -split "-----END CERTIFICATE-----"
        
        Write-ColorOutput "`nüìã Sample certificates in bundle:" $Blue
        $count = 0
        foreach ($cert in $certs) {
            if ($cert -match "-----BEGIN CERTIFICATE-----" -and $count -lt 5) {
                $fullCert = $cert + "-----END CERTIFICATE-----"
                $fullCert | Out-File -FilePath $tempCertPath -Encoding utf8 -NoNewline
                
                try {
                    $subject = & openssl x509 -in $tempCertPath -noout -subject 2>$null
                    if ($subject) {
                        $subjectCN = ($subject -replace ".*CN\s*=\s*([^,/]+).*", '$1').Trim()
                        Write-ColorOutput "  $($count + 1). $subjectCN" $Green
                        $count++
                    }
                }
                catch {
                    # Skip invalid certificates
                }
            }
        }
        
        Remove-Item $tempCertPath -ErrorAction SilentlyContinue
        
        if ($count -lt $certCount) {
            Write-ColorOutput "  ... and $($certCount - $count) more certificates" $Yellow
        }
    }
    else {
        Write-ColorOutput "‚ùå No valid certificates found in bundle" $Red
        return
    }
}
catch {
    Write-ColorOutput "‚ö†Ô∏è  Could not validate CA bundle: $_" $Yellow
}

# Create symbolic links for common names
$bundleDir = Split-Path $OutputPath -Parent
$commonNames = @(
    "cacert.pem",
    "ca-certificates.crt", 
    "cert.pem"
)

Write-ColorOutput "`nüîó Creating common name links..." $Yellow
foreach ($commonName in $commonNames) {
    $linkPath = Join-Path $bundleDir $commonName
    if (-not (Test-Path $linkPath)) {
        try {
            # On Windows, create a copy instead of symlink for compatibility
            Copy-Item $OutputPath $linkPath
            Write-ColorOutput "‚úÖ Created link: $linkPath" $Green
        }
        catch {
            Write-ColorOutput "‚ö†Ô∏è  Could not create link: $linkPath" $Yellow
        }
    }
}

# Generate usage examples
$usageExamples = @"
# üìã CA Bundle Usage Examples

## cURL
```bash
curl --cacert $OutputPath https://example.com
```

## Node.js
```javascript
process.env.SSL_CA = '$OutputPath';
// or
const https = require('https');
const fs = require('fs');
const ca = fs.readFileSync('$OutputPath');
```

## Python requests
```python
import requests
response = requests.get('https://example.com', verify='$OutputPath')
```

## OpenSSL verify
```bash
openssl verify -CAfile $OutputPath certificate.crt
```

## Git (for HTTPS repositories)
```bash
git config --global http.sslcainfo $OutputPath
```

## Environment Variable
```bash
export SSL_CERT_FILE=$OutputPath
export REQUESTS_CA_BUNDLE=$OutputPath
export CURL_CA_BUNDLE=$OutputPath
```
"@

$usageFile = Join-Path (Split-Path $OutputPath -Parent) "CA_BUNDLE_USAGE.md"
$usageExamples | Out-File -FilePath $usageFile -Encoding utf8
Write-ColorOutput "‚úÖ Generated usage examples: $usageFile" $Green

Write-ColorOutput "`nüéâ CA bundle update complete!" $Green
Write-ColorOutput "üìÅ Bundle location: $OutputPath" $Blue
Write-ColorOutput "üìö Usage examples: $usageFile" $Blue