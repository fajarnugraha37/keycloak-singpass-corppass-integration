# Common location blocks for proxying services
# Include this file in server blocks to avoid duplication

# Health check endpoint
location /health {
    access_log off;
    add_header Content-Type text/plain;
    return 200 'healthy\n';
}

# Nginx status for monitoring (restricted access)
location /nginx-status {
    access_log off;
    allow 127.0.0.1;
    allow 10.0.0.0/8;
    allow 172.16.0.0/12;
    allow 192.168.0.0/16;
    deny all;
    stub_status on;
}

# Authentication service (Keycloak) - Static resources
location ~* ^/auth/resources/.+\.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|map)$ {
    limit_req zone=auth_static burst=500 nodelay;
    include /etc/nginx/proxy.conf;
    proxy_set_header X-Forwarded-Prefix /auth;
    proxy_pass http://keycloak:8080;
    
    # Cache static auth resources
    expires 1h;
    add_header Cache-Control "public, must-revalidate";
}

# Authentication service (Keycloak) - Language/locale files
location ~* ^/auth/resources/[^/]+/(admin|account)/.+ {
    limit_req zone=auth_static burst=500 nodelay;
    include /etc/nginx/proxy.conf;
    proxy_set_header X-Forwarded-Prefix /auth;
    proxy_pass http://keycloak:8080;
    
    # Cache language files
    expires 1h;
    add_header Cache-Control "public, must-revalidate";
}

# Authentication service (Keycloak) - Admin API
location ~* ^/auth/(admin|realms/.+/(protocol|account|login-actions)) {
    limit_req zone=auth burst=300 nodelay;
    include /etc/nginx/proxy.conf;
    include /etc/nginx/cors.conf;
    proxy_set_header X-Forwarded-Prefix /auth;
    proxy_pass http://keycloak:8080;
    
    # Additional headers for auth service
    proxy_set_header X-Original-URI $request_uri;
    proxy_set_header X-Original-Method $request_method;
}

# Authentication service (Keycloak) - All other auth requests
location /auth/ {
    limit_req zone=auth burst=200 nodelay;
    include /etc/nginx/proxy.conf;
    include /etc/nginx/cors.conf;
    proxy_set_header X-Forwarded-Prefix /auth;
    proxy_pass http://keycloak:8080;
    
    # Additional headers for auth service
    proxy_set_header X-Original-URI $request_uri;
    proxy_set_header X-Original-Method $request_method;
}

# ACEAS API service
location /aceas/api/ {
    limit_req zone=api burst=100 nodelay;
    include /etc/nginx/proxy.conf;
    include /etc/nginx/cors.conf;
    proxy_set_header X-Forwarded-Prefix /aceas/api;
    set $aceas_upstream "aceas-api:3000";
    proxy_pass http://$aceas_upstream;
}

# CPDS API service
location /cpds/api/ {
    limit_req zone=api burst=100 nodelay;
    include /etc/nginx/proxy.conf;
    include /etc/nginx/cors.conf;
    proxy_set_header X-Forwarded-Prefix /cpds/api;
    set $cpds_upstream "cpds-api:3001";
    proxy_pass http://$cpds_upstream;
}

# Identity service (OIDC Provider)
location /ids/ {
    limit_req zone=api burst=100 nodelay;
    include /etc/nginx/proxy.conf;
    include /etc/nginx/cors.conf;
    proxy_set_header X-Forwarded-Prefix /ids;
    set $ids_upstream "ids:7000";
    proxy_pass http://$ids_upstream;
}

# Static assets with optimized caching for Vite builds
location /assets/ {
    limit_req zone=static burst=100 nodelay;
    root /usr/share/nginx/html;
    try_files $uri $uri/ =404;
    
    # Enable gzip_static for all assets
    gzip_static on;
    
    # Vite-generated files with hashes - cache aggressively
    location ~* \.(css|js)$ {
        # Check if filename contains hash (Vite pattern: name-hash-timestamp.ext)
        if ($uri ~ "^/assets/.+-[a-zA-Z0-9_-]+\.(css|js)$") {
            expires 1y;
            add_header Cache-Control "public, immutable";
            break;
        }
        
        # Fallback for non-hashed files
        expires 1h;
        add_header Cache-Control "public, must-revalidate";
        add_header Vary "Accept-Encoding";
    }
    
    # Images with hash - cache aggressively
    location ~* /images/.+-[a-zA-Z0-9_-]+\.(jpg|jpeg|png|gif|ico|svg|webp|avif)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
    
    # Fonts with hash - cache aggressively
    location ~* \.(woff|woff2|ttf|eot)$ {
        if ($uri ~ "^/assets/.+-[a-zA-Z0-9_-]+\.(woff|woff2|ttf|eot)$") {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Access-Control-Allow-Origin "*";
            break;
        }
        
        # Fallback for non-hashed fonts
        expires 30d;
        add_header Cache-Control "public, must-revalidate";
        add_header Access-Control-Allow-Origin "*";
    }
    
    # All other images - shorter cache for non-hashed
    location ~* \.(jpg|jpeg|png|gif|ico|svg|webp|avif)$ {
        expires 7d;
        add_header Cache-Control "public, must-revalidate";
    }
}

# ACEAS SPA with proper fallback and cache busting
location /aceas/ {
    limit_req zone=static burst=100 nodelay;
    root /usr/share/nginx/html;
    try_files $uri $uri/ /aceas/index.html;
    
    # HTML files - no cache to ensure fresh builds
    location ~ \.html$ {
        expires -1;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header X-Vite-Build "fresh";
    }
}

# CPDS SPA with proper fallback and cache busting
location /cpds/ {
    limit_req zone=static burst=100 nodelay;
    root /usr/share/nginx/html;
    try_files $uri $uri/ /cpds/index.html;
    
    # HTML files - no cache to ensure fresh builds
    location ~ \.html$ {
        expires -1;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header X-Vite-Build "fresh";
    }
}

# Handle root path - serve eServices portal index with cache busting
location = / {
    limit_req zone=static burst=100 nodelay;
    root /usr/share/nginx/html;
    try_files /index.html =404;
    
    # Main HTML - no cache to ensure fresh builds
    expires -1;
    add_header Cache-Control "no-cache, no-store, must-revalidate";
    add_header Pragma "no-cache";
    add_header X-Vite-Build "fresh";
}

# Redirect /aceas to /aceas/ (with trailing slash)
location = /aceas {
    return 301 /aceas/;
}

# Redirect /cpds to /cpds/ (with trailing slash)
location = /cpds {
    return 301 /cpds/;
}

# Error pages with cache busting
location ~ ^/(404|50x)\.html$ {
    root /usr/share/nginx/html;
    
    # Error pages - no cache to ensure fresh content
    expires -1;
    add_header Cache-Control "no-cache, no-store, must-revalidate";
    add_header Pragma "no-cache";
    add_header X-Vite-Build "fresh";
}